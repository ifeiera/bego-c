#include "../include/bego_win.h"
#include <stdexcept>

/**
 * @file input_helpers.cpp
 * @author Eterninety
 * @brief Core implementation of hardware-level input simulation functions
 * 
 * @note EDUCATIONAL PURPOSE ONLY
 * This library was developed for studying anti-cheat systems in games through penetration testing.
 * It is intended strictly for educational purposes to understand hardware-level input simulation.
 * DO NOT use this to bypass anti-cheat systems or create unfair advantages in games.
 */

namespace bego {

/**
 * @brief The core function that sends input events directly to the Windows input system
 * 
 * @details This is the most critical function in the library as it interfaces directly 
 * with the Windows SendInput API to generate hardware-level input events. 
 * The events generated through this function are indistinguishable from real hardware 
 * inputs for most applications, including games with anti-cheat systems.
 * 
 * The function validates the input vector, calculates the appropriate sizes,
 * and then calls the Windows API, checking for failures that might occur due to
 * security restrictions or User Interface Privilege Isolation (UIPI).
 * 
 * @param input Vector of INPUT structures to be sent to the system
 * @throws InputError If not all inputs could be sent (e.g., blocked by UIPI)
 */
void send_input(const std::vector<INPUT>& input) {
    if (input.empty()) {
        return;
    }

    // Get the size of INPUT structure
    const int input_size = sizeof(INPUT);
    
    // Get the number of input events
    const UINT input_len = static_cast<UINT>(input.size());
    
    // Send input events to the system
    // Use const_cast to remove const qualifier as SendInput requires LPINPUT (non-const)
    UINT result = SendInput(input_len, const_cast<LPINPUT>(input.data()), input_size);
    
    if (result != input_len) {
        // Get the last error code
        DWORD error_code = GetLastError();
        throw InputError(InputError::Type::Simulate, 
            "Not all input events were sent. They may have been blocked by UIPI. Error code: " + 
            std::to_string(error_code));
    }
}

/**
 * @brief Creates a mouse INPUT structure with specified parameters
 * 
 * @details This function configures a Windows INPUT structure for mouse events,
 * setting all necessary fields to ensure proper hardware-level simulation.
 * The dwExtraInfo field is set to a custom marker value that can identify
 * events generated by this library.
 * 
 * The time field is intentionally set to 0, which causes the system to
 * provide its own timestamp, identical to how real hardware events are processed.
 * 
 * @param flags The type of mouse event (MOUSEEVENTF_*)
 * @param data Additional data for scroll or XButton events
 * @param dx X-coordinate for movement or position
 * @param dy Y-coordinate for movement or position
 * @param dw_extra_info Custom marker value (typically 0x12345678)
 * @return INPUT Fully configured mouse INPUT structure
 */
INPUT create_mouse_event(DWORD flags, int data, int dx, int dy, size_t dw_extra_info) {
    INPUT input = {};
    input.type = INPUT_MOUSE;
    
    input.mi.dx = dx;
    input.mi.dy = dy;
    input.mi.mouseData = static_cast<DWORD>(data);
    input.mi.dwFlags = flags;
    input.mi.time = 0; // Always set to 0 (system will fill it)
    input.mi.dwExtraInfo = static_cast<ULONG_PTR>(dw_extra_info);
    
    return input;
}

/**
 * @brief Creates a keyboard INPUT structure with specified parameters
 * 
 * @details This function configures a Windows INPUT structure for keyboard events,
 * setting all necessary fields to ensure proper hardware-level simulation.
 * The function handles both virtual key codes and scan codes.
 * 
 * The dwExtraInfo field is set to a custom marker value that can identify
 * events generated by this library. The time field is set to 0, which causes
 * the system to provide its own timestamp.
 * 
 * @param flags Keyboard flags (KEYEVENTF_*)
 * @param vk Virtual key code
 * @param scan Hardware scan code
 * @param dw_extra_info Custom marker value (typically 0x12345678)
 * @return INPUT Fully configured keyboard INPUT structure
 */
INPUT create_keybd_event(DWORD flags, WORD vk, WORD scan, size_t dw_extra_info) {
    INPUT input = {};
    input.type = INPUT_KEYBOARD;
    
    input.ki.wVk = vk;
    input.ki.wScan = scan;
    input.ki.dwFlags = flags;
    input.ki.time = 0; // Always set to 0 (system will fill it)
    input.ki.dwExtraInfo = static_cast<ULONG_PTR>(dw_extra_info);
    
    return input;
}

} // namespace bego 